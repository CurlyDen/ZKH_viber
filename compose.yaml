services:
  api_front:
    build: /app/static
    depends_on:
      - api
    # command: serve -s build -l 3000
    restart: unless-stopped
    labels: # new
      - "traefik.enable=true"
      - "traefik.http.routers.zkh_front.rule=Host(`localhost`) && PathPrefix(`/mc_viber`)"
      - "traefik.http.routers.zkh_front.service=api_front"
      - "traefik.http.routers.zkh_front.middlewares=api_front-stripprefix"
      - "traefik.http.services.api_front.loadbalancer.server.port=80"
      - "traefik.http.middlewares.api_front-stripprefix.stripprefix.prefixes=/mc_viber,/mc_viber/"


  api:
    build: /app
    depends_on:
      - traefik
      - pgdb
    restart: always
    expose:
      - 8000
    labels: # new
      - "traefik.enable=true"
      - "traefik.http.routers.zkh.rule=Host(`localhost`) && PathPrefix(`/api_mc`)"

  pgdb:
    # Использование готового образа postgres
    image: postgres
    # Задание переменных окружения для контейнера с postgres
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      # Задание имени контейнера для сервиса pgdb
    container_name:
      pgdb
      # Связывание тома с директорией в контейнере для сохранения данных postgres
    volumes:
      - pgdbdata:/var/lib/postgresql/data/

  # viber_hook:
  #   restart: always
  #   build: ./app
  #   depends_on:
  #     - api
  #   command: python sethook.py

volumes:
  pgdbdata: null
